import React, { Component } from 'react';
import { CardList } from './components/card-list/card-list.component'

import './App.css';

//function App() {
// invece di una function, estendiamo la classe Component
// che ci permette attraverso constructor di avere lo stato
// con this.state

class App extends Component {
  
  constructor() {
    super();
    
    this.state = {
      monsters: [],
      searchField: ''
    };
  }

  componentDidMount(){
    fetch('https://jsonplaceholder.typicode.com/users')
      .then(response => response.json())
      .then(users => this.setState({ monsters: users }))
  }

  render () {
        // vogliamo una costante per lo state al momento del render.
        // questa notazione di const è equivalente a
        // const monsters = this.state.monster;
        // const searchField = this.state.searchField;
        // scritta come la riga qui sotto è + compatta e semplice.
        const { monsters, searchField } = this.state;
        const filteredMonsters = monsters.filter(
          monster => monster.name.toLowerCase().includes(
            searchField.toLowerCase()
          )
        );
        return (<div className="App">
          <input 
            type='search' 
            placeholder='search monster' 
            onChange={
            // e sta per evento
            e => {
                this.setState(
                  {searchField: e.target.value},
                  // se metti qui come function nel secondo argomento di setState è sincrono ** guarda wiki è importante
                  // () => console.log(this.state)
                  );
                // se metti il console.log qui e non come secondo
                // argomento di setState è asincrono e rimani indetro con i caratteri
                // console.log(this.state)
              }} />
          <CardList monsters={filteredMonsters} />
        </div>)
    }
}

export default App;
